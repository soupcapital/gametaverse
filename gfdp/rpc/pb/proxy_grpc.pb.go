// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBProxyClient is the client API for DBProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBProxyClient interface {
	Dau(ctx context.Context, in *DauReq, opts ...grpc.CallOption) (*DauRsp, error)
	TxCount(ctx context.Context, in *TxCountReq, opts ...grpc.CallOption) (*TxCountRsp, error)
}

type dBProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewDBProxyClient(cc grpc.ClientConnInterface) DBProxyClient {
	return &dBProxyClient{cc}
}

func (c *dBProxyClient) Dau(ctx context.Context, in *DauReq, opts ...grpc.CallOption) (*DauRsp, error) {
	out := new(DauRsp)
	err := c.cc.Invoke(ctx, "/DBProxy/Dau", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBProxyClient) TxCount(ctx context.Context, in *TxCountReq, opts ...grpc.CallOption) (*TxCountRsp, error) {
	out := new(TxCountRsp)
	err := c.cc.Invoke(ctx, "/DBProxy/TxCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBProxyServer is the server API for DBProxy service.
// All implementations must embed UnimplementedDBProxyServer
// for forward compatibility
type DBProxyServer interface {
	Dau(context.Context, *DauReq) (*DauRsp, error)
	TxCount(context.Context, *TxCountReq) (*TxCountRsp, error)
	mustEmbedUnimplementedDBProxyServer()
}

// UnimplementedDBProxyServer must be embedded to have forward compatible implementations.
type UnimplementedDBProxyServer struct {
}

func (UnimplementedDBProxyServer) Dau(context.Context, *DauReq) (*DauRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dau not implemented")
}
func (UnimplementedDBProxyServer) TxCount(context.Context, *TxCountReq) (*TxCountRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxCount not implemented")
}
func (UnimplementedDBProxyServer) mustEmbedUnimplementedDBProxyServer() {}

// UnsafeDBProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBProxyServer will
// result in compilation errors.
type UnsafeDBProxyServer interface {
	mustEmbedUnimplementedDBProxyServer()
}

func RegisterDBProxyServer(s grpc.ServiceRegistrar, srv DBProxyServer) {
	s.RegisterService(&DBProxy_ServiceDesc, srv)
}

func _DBProxy_Dau_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DauReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServer).Dau(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBProxy/Dau",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServer).Dau(ctx, req.(*DauReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBProxy_TxCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBProxyServer).TxCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBProxy/TxCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBProxyServer).TxCount(ctx, req.(*TxCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DBProxy_ServiceDesc is the grpc.ServiceDesc for DBProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DBProxy",
	HandlerType: (*DBProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dau",
			Handler:    _DBProxy_Dau_Handler,
		},
		{
			MethodName: "TxCount",
			Handler:    _DBProxy_TxCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}
